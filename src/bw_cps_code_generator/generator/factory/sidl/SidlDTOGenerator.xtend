package bw_cps_code_generator.generator.factory.sidl

import bw_cps_code_generator.generator.BwcpsOutputConfigurationProvider
import bw_cps_code_generator.generator.factory.IDTOGenerator
import de.fzi.bwcps.stream.bwcps_streams.entity.NodeType
import de.fzi.sensidl.design.sensidl.dataRepresentation.Data
import de.fzi.sensidl.design.sensidl.dataRepresentation.MeasurementData
import java.util.HashMap
import java.util.List
import java.util.stream.Collectors
import org.apache.log4j.Logger
import javax.measure.unit.Unit;
import bw_cps_code_generator.generator.GenerationUtil

/**
 * The sild file generator for the SensIDL Model. 
 * Code will be generated by running the {@code generate()}-Method
 * @author Sven Eckhardt
 */
class SidlDTOGenerator implements IDTOGenerator {
	
	private static var String OHM_SIGN = "Ω";
	private static var String CORRECT_OHM_SIGN_REPRESENTATION = "Ohm";

	private static Logger logger = Logger.getLogger(SidlDTOGenerator)
	
	String projectName
		
	private val String packagePrefix 
	private List<NodeType> nodetypes

	/**
	 * The constructor calls the constructor of the superclass to set a
	 * list of DataSet-elements.
	 * @param newDataSet - represents the list of DataSet-elements.
	 */
	new(String projectName, List<NodeType> nodetypes, String packagePrefix) {
		this.projectName = projectName
		this.nodetypes = nodetypes
		this.packagePrefix = packagePrefix
	}

	/**
	 * Generates the .sidl file for each data transfer object.
	 * @see IDTOGenerator#generate()
	 */
	override generate() {
		logger.info("Start with code-generation of SensIDL data set files.")
		//collect data to generate TODO: optimize
//		val dataLists = nodetypes.map(nodetype|nodetype.input)
//		dataLists.addAll(nodetypes.map(nodetype|nodetype.output))
//		val data = dataLists.stream.flatMap(list| list.stream).distinct.collect(Collectors.toList())
//		
		
		val filesToGenerate = new HashMap<String, CharSequence>
		for(nodetype: nodetypes) {
			//input
			filesToGenerate.put(addFileExtensionTo(GenerationUtil.getEntityUpperName(nodetype) + "InputDataSet"),
			generateClass(GenerationUtil.getEntityUpperName(nodetype) + "InputDataSet", nodetype.input))

			logger.info(
				"File: " + addFileExtensionTo(GenerationUtil.getEntityUpperName(nodetype) + "InputDataSet") +
					" was generated in " + BwcpsOutputConfigurationProvider.BWCPS_GEN)
			//output
						filesToGenerate.put(addFileExtensionTo(GenerationUtil.getEntityUpperName(nodetype) + "OutputDataSet"),
			generateClass(GenerationUtil.getEntityUpperName(nodetype) + "OutputDataSet", nodetype.output))

			logger.info(
				"File: " + addFileExtensionTo(GenerationUtil.getEntityUpperName(nodetype) + "OutputDataSet") +
					" was generated in " + BwcpsOutputConfigurationProvider.BWCPS_GEN)
		}
		
		filesToGenerate
	}

	/**
	 * Generates the Classes
	 */
	def generateClass(String name, List<Data> data) {
		'''
«««		TODO sensorInterface «packagePrefix»«name.toLowerCase» {
		sensorInterface «name.toLowerCase» {
			encoding: SENSIDL_BINARY, endianness: BIG_ENDIAN, alignment: 1 BIT
			sensorData {
				«generateDataSet(name,data)»
			}
		}'''
	}

	/**
	 * generates the dataSets
	 */
	def generateDataSet(String name, List<Data> data) {
		'''
			dataSet  «name» {
«««				TODO NOT SO SURE : NAME NULL??
				«FOR d : data»
					«d.name» as «d.dataType» «d.createUnit» «d.createDescription»
				«ENDFOR»
			}
		'''
	}

	/**
	 * generates the description for data
	 */
	def createDescription(Data d) {
		if (d.description != null) {
			'''/** «d.description» */ '''
		} else {
			''''''
		}
	}

	/**
	 * generates the units for the data
	 */
	def createUnit(Data d) {
		//TODO Unit
		if (d instanceof MeasurementData) {
			if (!((d as MeasurementData).getUnit == null) && !((d as MeasurementData).getUnit.toString.isNullOrEmpty)) {
				'''in «d.unit.toString.convertUnitStringIfNecessary»'''
			} else {
				'''in Dimensionless'''
			}
		} else {
			''''''
		}
	}
	
	def convertUnitStringIfNecessary(String unit) {
		if (unit.equals(OHM_SIGN)) {
			return CORRECT_OHM_SIGN_REPRESENTATION;
		}
		
		return unit;
	}


	override addFileExtensionTo(String ClassName) {
		return ClassName + ".sidl"
	}
	
	override toTypeName(Data data) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

}
