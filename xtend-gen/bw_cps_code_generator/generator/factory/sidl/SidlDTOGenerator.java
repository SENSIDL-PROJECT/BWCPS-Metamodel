package bw_cps_code_generator.generator.factory.sidl;

import bw_cps_code_generator.generator.BwcpsOutputConfigurationProvider;
import bw_cps_code_generator.generator.GenerationUtil;
import bw_cps_code_generator.generator.factory.IDTOGenerator;
import com.google.common.base.Objects;
import de.fzi.bwcps.stream.bwcps_streams.entity.NodeType;
import de.fzi.sensidl.design.sensidl.dataRepresentation.Data;
import de.fzi.sensidl.design.sensidl.dataRepresentation.DataType;
import de.fzi.sensidl.design.sensidl.dataRepresentation.MeasurementData;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * The sild file generator for the SensIDL Model.
 * Code will be generated by running the {@code generate()}-Method
 * @author Sven Eckhardt
 */
@SuppressWarnings("all")
public class SidlDTOGenerator implements IDTOGenerator {
  private static String OHM_SIGN = "Î©";
  
  private static String CORRECT_OHM_SIGN_REPRESENTATION = "Ohm";
  
  private static Logger logger = Logger.getLogger(SidlDTOGenerator.class);
  
  private String projectName;
  
  private final String packagePrefix;
  
  private List<NodeType> nodetypes;
  
  /**
   * The constructor calls the constructor of the superclass to set a
   * list of DataSet-elements.
   * @param newDataSet - represents the list of DataSet-elements.
   */
  public SidlDTOGenerator(final String projectName, final List<NodeType> nodetypes, final String packagePrefix) {
    this.projectName = projectName;
    this.nodetypes = nodetypes;
    this.packagePrefix = packagePrefix;
  }
  
  /**
   * Generates the .sidl file for each data transfer object.
   * @see IDTOGenerator#generate()
   */
  @Override
  public HashMap<String, CharSequence> generate() {
    HashMap<String, CharSequence> _xblockexpression = null;
    {
      SidlDTOGenerator.logger.info("Start with code-generation of SensIDL data set files.");
      final HashMap<String, CharSequence> filesToGenerate = new HashMap<String, CharSequence>();
      for (final NodeType nodetype : this.nodetypes) {
        {
          String _entityUpperName = GenerationUtil.getEntityUpperName(nodetype);
          String _plus = (_entityUpperName + "InputDataSet");
          String _entityUpperName_1 = GenerationUtil.getEntityUpperName(nodetype);
          String _plus_1 = (_entityUpperName_1 + "InputDataSet");
          filesToGenerate.put(this.addFileExtensionTo(_plus), 
            this.generateClass(_plus_1, nodetype.getInput()));
          String _entityUpperName_2 = GenerationUtil.getEntityUpperName(nodetype);
          String _plus_2 = (_entityUpperName_2 + "InputDataSet");
          String _addFileExtensionTo = this.addFileExtensionTo(_plus_2);
          String _plus_3 = ("File: " + _addFileExtensionTo);
          String _plus_4 = (_plus_3 + 
            " was generated in ");
          String _plus_5 = (_plus_4 + BwcpsOutputConfigurationProvider.BWCPS_GEN);
          SidlDTOGenerator.logger.info(_plus_5);
          String _entityUpperName_3 = GenerationUtil.getEntityUpperName(nodetype);
          String _plus_6 = (_entityUpperName_3 + "OutputDataSet");
          String _entityUpperName_4 = GenerationUtil.getEntityUpperName(nodetype);
          String _plus_7 = (_entityUpperName_4 + "OutputDataSet");
          filesToGenerate.put(this.addFileExtensionTo(_plus_6), 
            this.generateClass(_plus_7, nodetype.getOutput()));
          String _entityUpperName_5 = GenerationUtil.getEntityUpperName(nodetype);
          String _plus_8 = (_entityUpperName_5 + "OutputDataSet");
          String _addFileExtensionTo_1 = this.addFileExtensionTo(_plus_8);
          String _plus_9 = ("File: " + _addFileExtensionTo_1);
          String _plus_10 = (_plus_9 + 
            " was generated in ");
          String _plus_11 = (_plus_10 + BwcpsOutputConfigurationProvider.BWCPS_GEN);
          SidlDTOGenerator.logger.info(_plus_11);
        }
      }
      _xblockexpression = filesToGenerate;
    }
    return _xblockexpression;
  }
  
  /**
   * Generates the Classes
   */
  public CharSequence generateClass(final String name, final List<Data> data) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("sensorInterface ");
    String _lowerCase = name.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("encoding: SENSIDL_BINARY, endianness: BIG_ENDIAN, alignment: 1 BIT");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sensorData {");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateDataSet = this.generateDataSet(name, data);
    _builder.append(_generateDataSet, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  /**
   * generates the dataSets
   */
  public CharSequence generateDataSet(final String name, final List<Data> data) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("dataSet  ");
    _builder.append(name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      for(final Data d : data) {
        _builder.append("\t");
        String _name = d.getName();
        _builder.append(_name, "\t");
        _builder.append(" as ");
        DataType _dataType = d.getDataType();
        _builder.append(_dataType, "\t");
        _builder.append(" ");
        CharSequence _createUnit = this.createUnit(d);
        _builder.append(_createUnit, "\t");
        _builder.append(" ");
        CharSequence _createDescription = this.createDescription(d);
        _builder.append(_createDescription, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * generates the description for data
   */
  public CharSequence createDescription(final Data d) {
    CharSequence _xifexpression = null;
    String _description = d.getDescription();
    boolean _notEquals = (!Objects.equal(_description, null));
    if (_notEquals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/** ");
      String _description_1 = d.getDescription();
      _builder.append(_description_1);
      _builder.append(" */ ");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }
  
  /**
   * generates the units for the data
   */
  public CharSequence createUnit(final Data d) {
    CharSequence _xifexpression = null;
    if ((d instanceof MeasurementData)) {
      CharSequence _xifexpression_1 = null;
      if (((!Objects.equal(((MeasurementData) d).getUnit(), null)) && (!StringExtensions.isNullOrEmpty(((MeasurementData) d).getUnit().toString())))) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("in ");
        String _convertUnitStringIfNecessary = this.convertUnitStringIfNecessary(((MeasurementData)d).getUnit().toString());
        _builder.append(_convertUnitStringIfNecessary);
        _xifexpression_1 = _builder;
      } else {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("in Dimensionless");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    } else {
      StringConcatenation _builder_2 = new StringConcatenation();
      _xifexpression = _builder_2;
    }
    return _xifexpression;
  }
  
  public String convertUnitStringIfNecessary(final String unit) {
    boolean _equals = unit.equals(SidlDTOGenerator.OHM_SIGN);
    if (_equals) {
      return SidlDTOGenerator.CORRECT_OHM_SIGN_REPRESENTATION;
    }
    return unit;
  }
  
  @Override
  public String addFileExtensionTo(final String ClassName) {
    return (ClassName + ".sidl");
  }
  
  @Override
  public String toTypeName(final Data data) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
}
