package bw_cps_code_generator.generator.factory.kuracomponents;

import bw_cps_code_generator.generator.BwCPSConstants;
import bw_cps_code_generator.generator.BwcpsOutputConfigurationProvider;
import de.fzi.bwcps.stream.bwcps_streams.entity.NodeLink;
import de.fzi.bwcps.stream.bwcps_streams.entity.SecurityMeasure;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class SecurityUtilityGenerator {
  private static final Logger logger = Logger.getLogger(SecurityUtilityGenerator.class);
  
  private final String projectName;
  
  private final String packagePrefix;
  
  public SecurityUtilityGenerator(final String projectName, final String newPackagePrefix) {
    this.projectName = projectName;
    this.packagePrefix = newPackagePrefix;
  }
  
  public HashMap<String, CharSequence> generate(final List<NodeLink> nodelinks) {
    HashMap<String, CharSequence> _xblockexpression = null;
    {
      SecurityUtilityGenerator.logger.info("Generate SecurityUtil class.");
      final HashMap<String, CharSequence> filesToGenerate = new HashMap<String, CharSequence>();
      filesToGenerate.put(this.addFileExtensionTo("SecurityUtil"), 
        this.getSecurityUtilBody());
      String _addFileExtensionTo = this.addFileExtensionTo("AESEncrypt");
      String _plus = ("File: " + _addFileExtensionTo);
      String _plus_1 = (_plus + " was generated in ");
      String _plus_2 = (_plus_1 + 
        BwcpsOutputConfigurationProvider.BWCPS_GEN);
      SecurityUtilityGenerator.logger.info(_plus_2);
      final Function1<NodeLink, Boolean> _function = (NodeLink n) -> {
        return Boolean.valueOf(n.getSecurityMeasure().contains(SecurityMeasure.ENCRYPT));
      };
      boolean _exists = IterableExtensions.<NodeLink>exists(nodelinks, _function);
      if (_exists) {
        filesToGenerate.put(this.addFileExtensionTo("AESEncrypt"), 
          this.getAESEncryptBody());
        String _addFileExtensionTo_1 = this.addFileExtensionTo("AESEncrypt");
        String _plus_3 = ("File: " + _addFileExtensionTo_1);
        String _plus_4 = (_plus_3 + " was generated in ");
        String _plus_5 = (_plus_4 + 
          BwcpsOutputConfigurationProvider.BWCPS_GEN);
        SecurityUtilityGenerator.logger.info(_plus_5);
      }
      _xblockexpression = filesToGenerate;
    }
    return _xblockexpression;
  }
  
  public CharSequence getSecurityUtilBody() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packagePrefix);
    String _lowerCase = this.projectName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getAESEncryptBody() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packagePrefix);
    String _lowerCase = this.projectName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.nio.charset.StandardCharsets;");
    _builder.newLine();
    _builder.append("import java.security.GeneralSecurityException;");
    _builder.newLine();
    _builder.append("import java.security.InvalidAlgorithmParameterException;");
    _builder.newLine();
    _builder.append("import java.security.InvalidKeyException;");
    _builder.newLine();
    _builder.append("import java.util.Properties;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.crypto.BadPaddingException;");
    _builder.newLine();
    _builder.append("import javax.crypto.Cipher;");
    _builder.newLine();
    _builder.append("import javax.crypto.IllegalBlockSizeException;");
    _builder.newLine();
    _builder.append("import javax.crypto.ShortBufferException;");
    _builder.newLine();
    _builder.append("import javax.crypto.spec.IvParameterSpec;");
    _builder.newLine();
    _builder.append("import javax.crypto.spec.SecretKeySpec;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.commons.crypto.cipher.CryptoCipher;");
    _builder.newLine();
    _builder.append("import org.apache.commons.crypto.cipher.CryptoCipherFactory;");
    _builder.newLine();
    _builder.append("import org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;");
    _builder.newLine();
    _builder.append("import org.apache.commons.crypto.random.CryptoRandom;");
    _builder.newLine();
    _builder.append("import org.apache.commons.crypto.random.CryptoRandomFactory;");
    _builder.newLine();
    _builder.append("import org.apache.commons.crypto.utils.Utils;");
    _builder.newLine();
    _builder.append("import java.util.Base64;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AESEncrypt{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final int MIN_OUT_BUFFER_SIZE = 32;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final String transform = \"AES/CBC/PKCS5Padding\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CryptoCipher encipher;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("SecretKeySpec key;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("IvParameterSpec iv;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("byte[] IVBytes = new byte[16];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CryptoRandom random;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AESEncrypt(String cipherKey){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("key = new SecretKeySpec(getUTF8Bytes(cipherKey),\"AES\");");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("Properties properties = new Properties();");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("properties.setProperty(CryptoCipherFactory.CLASSES_KEY,");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("CipherProvider.OPENSSL.getClassName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("encipher = Utils.getCipherInstance(transform, properties);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Properties randProperties = new Properties();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("randProperties.put(CryptoRandomFactory.CLASSES_KEY,");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("CryptoRandomFactory.RandomProvider.OPENSSL.getClassName());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("// Gets the \'CryptoRandom\' instance.");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("random = CryptoRandomFactory.getCryptoRandom(randProperties);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GeneralSecurityException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String encrypt(String orgData) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("byte[] input = getUTF8Bytes(orgData);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int len = input.length*2;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(len <MIN_OUT_BUFFER_SIZE){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("len = MIN_OUT_BUFFER_SIZE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("byte[] output = new byte[len];");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("int total  = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("random.nextBytes(IVBytes);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("iv = new IvParameterSpec(IVBytes);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//Initializes the cipher with ENCRYPT_MODE, key and iv.");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("encipher.init(Cipher.ENCRYPT_MODE, key, iv);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//Continues a multiple-part encryption/decryption operation for byte array.");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("int updateBytes = encipher.update(input, 0, input.length, output, 0);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//System.out.println(updateBytes);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//We must call doFinal at the end of encryption/decryption.");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("int finalBytes = encipher.doFinal(input, 0, 0, output, updateBytes);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//System.out.println(finalBytes);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("total = updateBytes+finalBytes;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InvalidKeyException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InvalidAlgorithmParameterException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ShortBufferException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IllegalBlockSizeException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (BadPaddingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}finally{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("encipher.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return encodeB64(IVBytes) + \":\" + encodeB64(output,total);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String op1(String data) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return encrypt(data);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void close() {");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("encipher.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Converts String to UTF8 bytes");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param input the input string");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return UTF8 bytes");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static private byte[] getUTF8Bytes(String input) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return input.getBytes(StandardCharsets.UTF_8);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String encodeB64(byte[] data){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Base64.getEncoder().encodeToString(data);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String encodeB64(byte[] data,int total){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("byte[] sub = new byte[total];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.arraycopy(data, 0, sub, 0, total);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Base64.getEncoder().encodeToString(sub);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String addFileExtensionTo(final String className) {
    return (className + BwCPSConstants.JAVA_EXTENSION);
  }
}
